{
  "openapi": "3.0.0",
  "info": {
    "title": "REST Proxy API - With Adobe IMS",
    "description": " The Confluent REST Proxy provides a RESTful interface to a Kafka cluster, making it easy to produce and consume messages, view the state of the cluster, and perform administrative actions without using the native Kafka protocol or clients.<p>Adobe IMS(Identity Management Services) sits between your enterprise end-users and your Adobe solution/s, handling all user authentication for any Adobe solution.</p><ul><li> [Confluent API Reference](https://docs.confluent.io/current/kafka-rest) </li><li>[Adobe IMS API Reference](https://www.adobe.io/authentication/auth-methods.html#!AdobeDocs/adobeio-auth/master/Resources/IMS.md)</li></ul>",
    "version": "5.2.3"
  },
  "tags": [
    {
      "name": "Brokers",
      "description": "Broker information"
    },
    {
      "name": "Topics",
      "description": "Handle with topics"
    },
    {
      "name": "Partitions",
      "description": "Handle with partitions"
    },
    {
      "name": "Producer",
      "description": "Produce messages to topics"
    },
    {
      "name": "Consumer",
      "description": "Consume messages from topics"
    }
  ],
  "servers": [
    {
      "url": "http://{host_name}",
      "variables": {
        "host_name": {
          "default": "localhost",
          "description": "hostname"
        }
      }
    },
    {
      "url": "http://{host_name}:{port}",
      "variables": {
        "host_name": {
          "default": "localhost",
          "description": "hostname"
        },
        "port": {
          "default": "8082",
          "description": "port"
        }
      }
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/topics": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Get information about the topics",
        "description": "The topics resource provides information about the topics in your Kafka cluster and their current state. It also lets you produce messages by making POST requests to specific topics.",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/vnd.kafka.v2+xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          }
        }
      }
    },
    "/topics/{topic_name}": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Get metadata about a specific topic",
        "description": "Get metadata about a specific topic",
        "parameters": [
          {
            "name": "topic_name",
            "in": "path",
            "description": "topic name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/topic"
                }
              },
              "application/vnd.kafka.v2+xml": {
                "schema": {
                  "$ref": "#/components/schemas/topic"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 - Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40401 - Topic not found"
          }
        }
      },
      "post": {
        "tags": [
          "Producer"
        ],
        "summary": "Produce messages to a topic",
        "description": "Produce messages to a topic, optionally specifying keys or partitions for the messages. If no partition is provided, one will be chosen based on the hash of the key. If no key is provided, the partition will be chosen for each message in a round-robin fashion",
        "parameters": [
          {
            "name": "topic_name",
            "in": "path",
            "description": "name of topic to produce the messages to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "message(s) to produce to the given topic",
          "required": true,
          "content": {
            "application/vnd.kafka.binary.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/messages"
              }
            },
            "application/vnd.kafka.avro.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/messages"
              }
            },
            "application/vnd.kafka.json.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/messages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "message(s) posted",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/messages_response"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40401 - Topic not found"
          },
          "422": {
            "description": "Error codes:<br>42201 - Request includes keys and uses a format that requires schemas, but does not include the *key_schema* or *key_schema_id* fields<br>42202  - Request includes values and uses a format that requires schemas, but does not include the *value_schema* or *value_schema_id* fields<br>42205 - Request includes invalid schema."
          }
        }
      }
    },
    "/topics/{topic_name}/partitions": {
      "get": {
        "tags": [
          "Partitions"
        ],
        "summary": "Get a list of partitions for the topic",
        "description": "The partitions resource provides per-partition metadata, including the current leaders and replicas for each partition. It also allows you to consume and produce messages to single partition using GET and POST requests.",
        "parameters": [
          {
            "name": "topic_name",
            "in": "path",
            "description": "the name of the topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/partitions"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "topic not found"
          }
        }
      }
    },
    "/topics/{topic_name}/partitions/{partitionID}": {
      "get": {
        "tags": [
          "Partitions"
        ],
        "summary": "Get metadata about a single partition in the topic",
        "description": "Get metadata about a single partition in the topic",
        "parameters": [
          {
            "name": "topic_name",
            "in": "path",
            "description": "Name of the topic",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partitionID",
            "in": "path",
            "description": "ID of the partition to inspect",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/partitions"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          }
        }
      },
      "post": {
        "tags": [
          "Producer"
        ],
        "summary": "Produce messages to one partition of the topic",
        "description": "Produce messages to one partition of the topic",
        "parameters": [
          {
            "name": "topic_name",
            "in": "path",
            "description": "name of topic to produce the messages to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "partitionID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "message(s) to produce to the given topic",
          "required": true,
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/messages"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "message(s) posted",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/messages_response"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40401 - Topic not found<br>40402 - Partition not found"
          },
          "422": {
            "description": "Error codes:<br>42201 - Request includes keys and uses a format that requires schemas, but does not include the *key_schema* or *key_schema_id* fields<br>42202  -- Request includes values and uses a format that requires schemas, but does not include the *value_schema* or *value_schema_id* fields<br>42205 -- Request includes invalid schema."
          }
        }
      }
    },
    "/consumers/{group_name}": {
      "post": {
        "tags": [
          "Consumer"
        ],
        "summary": "Create a new consumer instance in the consumer group",
        "description": "Create a new consumer instance in the consumer group. The format parameter controls the deserialization of data from Kafka and the content type that must be used in the Accept header of subsequent read API requests performed against this consumer.",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/consumer_group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Consumer group created",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instance_id": {
                      "type": "string",
                      "description": "Unique ID for the consumer instance in this group"
                    },
                    "base_uri": {
                      "type": "string",
                      "description": "Base URI used to construct URIs for subsequent requests against this consumer instance.  This will be of the form *http://hostname:port/consumers/consumer_group/instances/instance_id*"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "409": {
            "description": "Consumer instance with the specified name already exists"
          },
          "422": {
            "description": "Invalid consumer configuration"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}": {
      "delete": {
        "tags": [
          "Consumer"
        ],
        "summary": "Delete the consumer instance",
        "description": "Delete the consumer instance",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}/offsets": {
      "post": {
        "tags": [
          "Consumer"
        ],
        "summary": "Commit a list of offsets for the consumer",
        "description": "Commit a list of offsets for the consumer.  When the post body is empty, it commits all the records that have been fetched by the consumer instance.",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "requestBody": {
          "description": "The offsets to commit",
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/offsets"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          }
        }
      },
      "get": {
        "tags": [
          "Consumer"
        ],
        "summary": "Get the latest committed offsets for the given partitions",
        "description": "Get the latest committed offsets for the given partitions",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/offsets_query"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/offsets_response"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40402 - Partition not found<br>40403 - Consumer instance not found"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}/subscription": {
      "post": {
        "tags": [
          "Consumer"
        ],
        "summary": "Subscribe to the given list of topics or topic pattern",
        "description": "Subscribe to the given list of topics or a topic pattern to get dynamically assigned partition.  If a prior subscription exists, it would be replaced by the latest subscription.",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/topic_subscription"
                  },
                  {
                    "$ref": "#/components/schemas/topic_pattern_subscription"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          },
          "409": {
            "description": "Error codes:<br>40903 - Subscription to topics, partitions and pattern are mutually exclusive"
          }
        }
      },
      "get": {
        "tags": [
          "Consumer"
        ],
        "summary": "Get the current subscribed list of topics",
        "description": "Get the current subscribed list of topics",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/topic_subscription"
                    },
                    {
                      "$ref": "#/components/schemas/topic_pattern_subscription"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes<br>40403 - Consumer instance not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Consumer"
        ],
        "summary": "Unsubscribe from the topics currently subscribed",
        "description": "Unsubscribe from the topics currently subscribed",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "responses": {
          "204": {
            "description": "success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}/assignments": {
      "post": {
        "tags": [
          "Consumer"
        ],
        "summary": "Manually assign a list of partitions to this consumer",
        "description": "Manually assign a list of partitions to this consumer.",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/assignment"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          },
          "409": {
            "description": "Error codes:<br>40903 - Subscription to topics, partitions and pattern are mutually exclusive"
          }
        }
      },
      "get": {
        "tags": [
          "Consumer"
        ],
        "summary": "Get the list of partitions currently manually assigned to this consumer",
        "description": "Get the list of partitions currently manually assigned to this consumer",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/assignment"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}/positions": {
      "post": {
        "tags": [
          "Consumer"
        ],
        "summary": "Overrides the fetch offsets of consumer",
        "description": "Overrides the fetch offsets that the consumer will use for the next set of records to fetch",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "type": "object",
                "properties": {
                  "offsets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "topic": {
                          "type": "string"
                        },
                        "partition": {
                          "type": "integer",
                          "description": "Partition ID"
                        },
                        "offset": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}/beginning": {
      "post": {
        "tags": [
          "Consumer"
        ],
        "summary": "Seek to the first offset for each of the given partitions",
        "description": "Seek to the first offset for each of the given partitions",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/partition_positions"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}/end": {
      "post": {
        "tags": [
          "Consumer"
        ],
        "summary": "Seek to the last offset for each of the given partitions",
        "description": "Seek to the last offset for each of the given partitions",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.kafka.v2+json": {
              "schema": {
                "$ref": "#/components/schemas/partition_positions"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:40403 -Consumer instance not found"
          }
        }
      }
    },
    "/consumers/{group_name}/instances/{instance}/records": {
      "get": {
        "tags": [
          "Consumer"
        ],
        "summary": "Fetch data from a consumer",
        "description": "Fetch data for the topics or partitions specified using one of the subscribe/assign APIs",
        "parameters": [
          {
            "name": "group_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the consumer group"
          },
          {
            "name": "instance",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the consumer instance"
          },
          {
            "name": "timeout",
            "in": "query",
            "description": "Maximum amount of milliseconds the REST proxy will spend fetching records",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max_bytes",
            "in": "query",
            "description": "The maximum number of bytes of unencoded keys and values that should be included in the response",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "records back from Kafka",
            "content": {
              "application/vnd.kafka.binary.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/records"
                }
              },
              "application/vnd.kafka.avro.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/records"
                }
              },
              "application/vnd.kafka.json.v2+json": {
                "schema": {
                  "$ref": "#/components/schemas/records"
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          },
          "404": {
            "description": "Error codes:<br>40403 - Consumer instance not found"
          },
          "406": {
            "description": "Error codes:<br>40601 - Consumer format does not match the embedded format requested by the *Accept* header"
          }
        }
      }
    },
    "/brokers": {
      "get": {
        "tags": [
          "Brokers"
        ],
        "summary": "Get a list of brokers",
        "description": "Get a list of brokers",
        "responses": {
          "200": {
            "description": "A list of broker IDs",
            "content": {
              "application/vnd.kafka.v2+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "brokers": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error codes:<br>401002 - Authorization Bearer Token not sent<br>401003 - Invalid Token<br>401004 - Authorization Bearer Token does not start Bearer<br>401005 - Bearer token has expired<br>401006 - Principal is not a instance of IMSBearerTokenJwt<br>401007 - Problem creating REST config object"
          },
          "403": {
            "description": "Error codes:<br>40301 – Kafka Authorization Error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "topic": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the topic"
          },
          "configs": {
            "type": "object",
            "description": "Per-topic configuration overrides"
          },
          "partitions": {
            "type": "array",
            "description": "List of partitions for this topic",
            "items": {
              "type": "object",
              "properties": {
                "partition": {
                  "type": "integer",
                  "description": "the ID of this partition"
                },
                "leader": {
                  "type": "integer",
                  "description": "the broker ID of the leader for this partition"
                },
                "replicas": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "broker": {
                        "type": "integer",
                        "description": "broker ID of the replica"
                      },
                      "leader": {
                        "type": "boolean",
                        "description": "true if this replica is the leader for the partition"
                      },
                      "in_sync": {
                        "type": "boolean",
                        "description": "true if this replica is currently in sync with the leader"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "messages": {
        "type": "object",
        "properties": {
          "key_schema": {
            "type": "string",
            "description": "Full schema encoded as a string (e.g. JSON serioalized for Avro data)"
          },
          "value_schema": {
            "type": "string",
            "description": "Full schema encoded as a string (e.g. JSON serioalized for Avro data)"
          },
          "records": {
            "type": "array",
            "description": "a list of records to produce to the topic",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The message key, formatted according to the embedded format, or null to omit a key (optional)"
                },
                "value": {
                  "type": "string",
                  "description": "The message value, formatted according to the embedded format"
                },
                "partion": {
                  "type": "integer",
                  "description": "Partition to store the message in (optional)"
                }
              }
            }
          }
        }
      },
      "messages_response": {
        "type": "object",
        "properties": {
          "key_schema_id": {
            "type": "integer",
            "description": "The ID for the schema used to produce keys, or null if keys were not used"
          },
          "value_schema_id": {
            "type": "integer",
            "description": "The ID for the schema used to produce keys, or null if keys were not used"
          },
          "offsets": {
            "type": "array",
            "description": "List of partitions and offsets the messages were published to",
            "items": {
              "type": "object",
              "properties": {
                "partition": {
                  "type": "integer",
                  "description": "Partition the message was published to, or null if publishing the message failed"
                },
                "offset": {
                  "type": "integer",
                  "description": "Offset of the message, or null if publishing the message failed"
                },
                "error_code": {
                  "type": "integer",
                  "description": "An error code classifying the reason the operation failed, or null if it succeeded",
                  "enum": [
                    1,
                    2
                  ]
                },
                "error": {
                  "type": "string",
                  "description": "An error message describing why the operation failed, or null if it succeeded"
                }
              }
            }
          }
        }
      },
      "partitions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/partition"
        }
      },
      "partition": {
        "type": "object",
        "properties": {
          "partition": {
            "type": "integer",
            "description": "ID of the partition"
          },
          "leader": {
            "type": "integer",
            "description": "Broker ID of the leader for this partition"
          },
          "replicas": {
            "type": "array",
            "description": "List of brokers acting as replicas for this partition",
            "items": {
              "type": "object",
              "properties": {
                "broker": {
                  "type": "integer",
                  "description": "Broker ID of the replica"
                },
                "leader": {
                  "type": "boolean",
                  "description": "true if this broker is the leader for the partition"
                },
                "in_sync": {
                  "type": "boolean",
                  "description": "true if the replica is in sync with the leader"
                }
              }
            }
          }
        }
      },
      "consumer_group": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the consumer instance, which will be used in URLs for the consumer"
          },
          "format": {
            "type": "string",
            "description": "The format of consumed messages, which is used to convert messages into a JSON-compatible form.",
            "enum": [
              "binary",
              "avro",
              "json"
            ],
            "default": "binary"
          },
          "auto.offset.reset": {
            "type": "string",
            "description": "sets the *auto.offset.reset* setting for the consumer"
          },
          "auto.commit.enable": {
            "type": "string",
            "description": "sets the *auto.commit.enable* setting for the consumer"
          },
          "fetch.min.bytes": {
            "type": "string",
            "description": "sets the *fetch.min.bytes* setting for this consumer specifically"
          },
          "consumer.request.timeout.ms": {
            "type": "string",
            "description": "sets the *consumer.request.timeout.ms* setting for this consumer specifically"
          }
        }
      },
      "offsets": {
        "type": "object",
        "properties": {
          "offsets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "topic": {
                  "type": "string",
                  "description": "Name of the topic"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition ID"
                },
                "offset": {
                  "type": "integer",
                  "description": "The offset to commit"
                }
              }
            }
          }
        }
      },
      "offsets_query": {
        "type": "object",
        "properties": {
          "partitions": {
            "type": "array",
            "description": "A list of partitions to find the last committed offsets for",
            "items": {
              "type": "object",
              "properties": {
                "topic": {
                  "type": "string",
                  "description": "Name of the topic"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition ID"
                }
              }
            }
          }
        }
      },
      "offsets_response": {
        "type": "object",
        "properties": {
          "offsets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "topic": {
                  "type": "string",
                  "description": "Name of the topic"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition ID"
                },
                "offset": {
                  "type": "integer",
                  "description": "Committed offset"
                },
                "metadata": {
                  "type": "string",
                  "description": "Metadata for the committed offset"
                }
              }
            }
          }
        }
      },
      "topic_subscription": {
        "type": "object",
        "properties": {
          "topics": {
            "type": "array",
            "description": "A list of topics to subscribe",
            "items": {
              "type": "string",
              "description": "Name of the topic"
            }
          }
        }
      },
      "topic_pattern_subscription": {
        "type": "object",
        "properties": {
          "topic_pattern": {
            "type": "string",
            "description": "A pattern of topics to subscribe to"
          }
        }
      },
      "assignment": {
        "type": "object",
        "properties": {
          "partitions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "topic": {
                  "type": "string",
                  "description": "Name of the topic"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition ID"
                }
              }
            }
          }
        }
      },
      "partition_positions": {
        "type": "object",
        "properties": {
          "partitions": {
            "type": "array",
            "description": "A list of partitions",
            "items": {
              "type": "object",
              "properties": {
                "topic": {
                  "type": "string"
                },
                "partition": {
                  "type": "integer",
                  "description": "Partition ID"
                }
              }
            }
          }
        }
      },
      "records": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "topic": {
              "type": "string",
              "description": "The topic"
            },
            "key": {
              "type": "string"
            },
            "value": {
              "type": "string"
            },
            "partition": {
              "type": "integer",
              "description": "Partition of the message"
            },
            "offset": {
              "type": "integer",
              "description": "Offset of the message"
            }
          }
        }
      }
    }
  }
}